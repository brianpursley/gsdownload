# Copyright 2022 Brian Pursley
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build

on:
  workflow_call:
  pull_request:
    branches:
      - main

env:
  ARTIFACTS: _artifacts

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Install golint
        run: go install golang.org/x/lint/golint@latest

      - name: StaticCheck
        run: make staticcheck

      - name: Lint
        run: make lint

      - name: Vet
        run: make vet

      - name: Verify
        run: make verify

      - name: Test
        run: make testrace

      - name: Create artifacts directory
        run: mkdir -p $ARTIFACTS

      - name: Get tags
        run: git fetch --prune --unshallow --tags

      - name: Build - darwin amd64
        env:
          GOOS: darwin
          GOARCH: amd64
          OUTPUT: gsdownload
        run: |
          make build
          tar czvf $ARTIFACTS/gsdownload-$GOOS-$GOARCH.tar.gz $OUTPUT

      - name: Build - darwin arm64
        env:
          GOOS: darwin
          GOARCH: arm64
          OUTPUT: gsdownload
        run: |
          make build
          tar czvf $ARTIFACTS/gsdownload-$GOOS-$GOARCH.tar.gz $OUTPUT

      - name: Build - linux amd64
        env:
          GOOS: linux
          GOARCH: amd64
          OUTPUT: gsdownload
        run: |
          make build
          tar czvf $ARTIFACTS/gsdownload-$GOOS-$GOARCH.tar.gz $OUTPUT

      - name: Build - linux arm64
        env:
          GOOS: linux
          GOARCH: arm64
          OUTPUT: gsdownload
        run: |
          make build
          tar czvf $ARTIFACTS/gsdownload-$GOOS-$GOARCH.tar.gz $OUTPUT

      - name: Build - windows amd64
        env:
          GOOS: windows
          GOARCH: amd64
          OUTPUT: gsdownload.exe
        run: |
          make build
          zip $ARTIFACTS/gsdownload-$GOOS-$GOARCH.zip $OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        if: github.event_name != 'pull_request'
        with:
          name: build-output
          path: ${{ env.ARTIFACTS }}/
          if-no-files-found: error
